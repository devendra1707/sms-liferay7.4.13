/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.armantec.lms.common.util.services.model.impl;

import com.armantec.lms.common.util.services.model.Translation;
import com.armantec.lms.common.util.services.model.TranslationModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Translation service. Represents a row in the &quot;lms_common_Translation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TranslationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TranslationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TranslationImpl
 * @generated
 */
@JSON(strict = true)
public class TranslationModelImpl
	extends BaseModelImpl<Translation> implements TranslationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a translation model instance should use the <code>Translation</code> interface instead.
	 */
	public static final String TABLE_NAME = "lms_common_Translation";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"modifiedBy", Types.BIGINT}, {"modifiedByName", Types.VARCHAR},
		{"deleted", Types.BOOLEAN}, {"languageCode", Types.VARCHAR},
		{"modelName", Types.VARCHAR}, {"columnName", Types.VARCHAR},
		{"text_", Types.VARCHAR}, {"recordId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedByName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deleted", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("languageCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modelName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("columnName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("text_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recordId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table lms_common_Translation (uuid_ VARCHAR(75) null,id_ LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,modifiedBy LONG,modifiedByName VARCHAR(75) null,deleted BOOLEAN,languageCode VARCHAR(2048) null,modelName VARCHAR(75) null,columnName VARCHAR(75) null,text_ TEXT null,recordId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table lms_common_Translation";

	public static final String ORDER_BY_JPQL = " ORDER BY translation.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY lms_common_Translation.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COLUMNNAME_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DELETED_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LANGUAGECODE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MODELNAME_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long RECORDID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TranslationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Translation.class;
	}

	@Override
	public String getModelClassName() {
		return Translation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Translation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Translation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Translation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Translation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Translation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Translation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Translation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Translation, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Translation, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Translation, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Translation, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Translation, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Translation, Object>>();
		Map<String, BiConsumer<Translation, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Translation, ?>>();

		attributeGetterFunctions.put("uuid", Translation::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Translation, String>)Translation::setUuid);
		attributeGetterFunctions.put("id", Translation::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<Translation, Long>)Translation::setId);
		attributeGetterFunctions.put("groupId", Translation::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Translation, Long>)Translation::setGroupId);
		attributeGetterFunctions.put("companyId", Translation::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<Translation, Long>)Translation::setCompanyId);
		attributeGetterFunctions.put("userId", Translation::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Translation, Long>)Translation::setUserId);
		attributeGetterFunctions.put("userName", Translation::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<Translation, String>)Translation::setUserName);
		attributeGetterFunctions.put("createDate", Translation::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Translation, Date>)Translation::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Translation::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Translation, Date>)Translation::setModifiedDate);
		attributeGetterFunctions.put("modifiedBy", Translation::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<Translation, Long>)Translation::setModifiedBy);
		attributeGetterFunctions.put(
			"modifiedByName", Translation::getModifiedByName);
		attributeSetterBiConsumers.put(
			"modifiedByName",
			(BiConsumer<Translation, String>)Translation::setModifiedByName);
		attributeGetterFunctions.put("deleted", Translation::getDeleted);
		attributeSetterBiConsumers.put(
			"deleted",
			(BiConsumer<Translation, Boolean>)Translation::setDeleted);
		attributeGetterFunctions.put(
			"languageCode", Translation::getLanguageCode);
		attributeSetterBiConsumers.put(
			"languageCode",
			(BiConsumer<Translation, String>)Translation::setLanguageCode);
		attributeGetterFunctions.put("modelName", Translation::getModelName);
		attributeSetterBiConsumers.put(
			"modelName",
			(BiConsumer<Translation, String>)Translation::setModelName);
		attributeGetterFunctions.put("columnName", Translation::getColumnName);
		attributeSetterBiConsumers.put(
			"columnName",
			(BiConsumer<Translation, String>)Translation::setColumnName);
		attributeGetterFunctions.put("text", Translation::getText);
		attributeSetterBiConsumers.put(
			"text", (BiConsumer<Translation, String>)Translation::setText);
		attributeGetterFunctions.put("recordId", Translation::getRecordId);
		attributeSetterBiConsumers.put(
			"recordId",
			(BiConsumer<Translation, Long>)Translation::setRecordId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public String getModifiedByName() {
		if (_modifiedByName == null) {
			return "";
		}
		else {
			return _modifiedByName;
		}
	}

	@Override
	public void setModifiedByName(String modifiedByName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedByName = modifiedByName;
	}

	@JSON
	@Override
	public boolean getDeleted() {
		return _deleted;
	}

	@JSON
	@Override
	public boolean isDeleted() {
		return _deleted;
	}

	@Override
	public void setDeleted(boolean deleted) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deleted = deleted;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalDeleted() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("deleted"));
	}

	@JSON
	@Override
	public String getLanguageCode() {
		if (_languageCode == null) {
			return "";
		}
		else {
			return _languageCode;
		}
	}

	@Override
	public void setLanguageCode(String languageCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_languageCode = languageCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalLanguageCode() {
		return getColumnOriginalValue("languageCode");
	}

	@JSON
	@Override
	public String getModelName() {
		if (_modelName == null) {
			return "";
		}
		else {
			return _modelName;
		}
	}

	@Override
	public void setModelName(String modelName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modelName = modelName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalModelName() {
		return getColumnOriginalValue("modelName");
	}

	@JSON
	@Override
	public String getColumnName() {
		if (_columnName == null) {
			return "";
		}
		else {
			return _columnName;
		}
	}

	@Override
	public void setColumnName(String columnName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_columnName = columnName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalColumnName() {
		return getColumnOriginalValue("columnName");
	}

	@JSON
	@Override
	public String getText() {
		if (_text == null) {
			return "";
		}
		else {
			return _text;
		}
	}

	@Override
	public void setText(String text) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_text = text;
	}

	@JSON
	@Override
	public long getRecordId() {
		return _recordId;
	}

	@Override
	public void setRecordId(long recordId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recordId = recordId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalRecordId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("recordId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Translation.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Translation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Translation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Translation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TranslationImpl translationImpl = new TranslationImpl();

		translationImpl.setUuid(getUuid());
		translationImpl.setId(getId());
		translationImpl.setGroupId(getGroupId());
		translationImpl.setCompanyId(getCompanyId());
		translationImpl.setUserId(getUserId());
		translationImpl.setUserName(getUserName());
		translationImpl.setCreateDate(getCreateDate());
		translationImpl.setModifiedDate(getModifiedDate());
		translationImpl.setModifiedBy(getModifiedBy());
		translationImpl.setModifiedByName(getModifiedByName());
		translationImpl.setDeleted(isDeleted());
		translationImpl.setLanguageCode(getLanguageCode());
		translationImpl.setModelName(getModelName());
		translationImpl.setColumnName(getColumnName());
		translationImpl.setText(getText());
		translationImpl.setRecordId(getRecordId());

		translationImpl.resetOriginalValues();

		return translationImpl;
	}

	@Override
	public Translation cloneWithOriginalValues() {
		TranslationImpl translationImpl = new TranslationImpl();

		translationImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		translationImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		translationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		translationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		translationImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		translationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		translationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		translationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		translationImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));
		translationImpl.setModifiedByName(
			this.<String>getColumnOriginalValue("modifiedByName"));
		translationImpl.setDeleted(
			this.<Boolean>getColumnOriginalValue("deleted"));
		translationImpl.setLanguageCode(
			this.<String>getColumnOriginalValue("languageCode"));
		translationImpl.setModelName(
			this.<String>getColumnOriginalValue("modelName"));
		translationImpl.setColumnName(
			this.<String>getColumnOriginalValue("columnName"));
		translationImpl.setText(this.<String>getColumnOriginalValue("text_"));
		translationImpl.setRecordId(
			this.<Long>getColumnOriginalValue("recordId"));

		return translationImpl;
	}

	@Override
	public int compareTo(Translation translation) {
		long primaryKey = translation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Translation)) {
			return false;
		}

		Translation translation = (Translation)object;

		long primaryKey = translation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Translation> toCacheModel() {
		TranslationCacheModel translationCacheModel =
			new TranslationCacheModel();

		translationCacheModel.uuid = getUuid();

		String uuid = translationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			translationCacheModel.uuid = null;
		}

		translationCacheModel.id = getId();

		translationCacheModel.groupId = getGroupId();

		translationCacheModel.companyId = getCompanyId();

		translationCacheModel.userId = getUserId();

		translationCacheModel.userName = getUserName();

		String userName = translationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			translationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			translationCacheModel.createDate = createDate.getTime();
		}
		else {
			translationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			translationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			translationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		translationCacheModel.modifiedBy = getModifiedBy();

		translationCacheModel.modifiedByName = getModifiedByName();

		String modifiedByName = translationCacheModel.modifiedByName;

		if ((modifiedByName != null) && (modifiedByName.length() == 0)) {
			translationCacheModel.modifiedByName = null;
		}

		translationCacheModel.deleted = isDeleted();

		translationCacheModel.languageCode = getLanguageCode();

		String languageCode = translationCacheModel.languageCode;

		if ((languageCode != null) && (languageCode.length() == 0)) {
			translationCacheModel.languageCode = null;
		}

		translationCacheModel.modelName = getModelName();

		String modelName = translationCacheModel.modelName;

		if ((modelName != null) && (modelName.length() == 0)) {
			translationCacheModel.modelName = null;
		}

		translationCacheModel.columnName = getColumnName();

		String columnName = translationCacheModel.columnName;

		if ((columnName != null) && (columnName.length() == 0)) {
			translationCacheModel.columnName = null;
		}

		translationCacheModel.text = getText();

		String text = translationCacheModel.text;

		if ((text != null) && (text.length() == 0)) {
			translationCacheModel.text = null;
		}

		translationCacheModel.recordId = getRecordId();

		return translationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Translation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Translation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Translation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Translation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Translation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Translation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Translation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Translation)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Translation>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Translation.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _id;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifiedBy;
	private String _modifiedByName;
	private boolean _deleted;
	private String _languageCode;
	private String _modelName;
	private String _columnName;
	private String _text;
	private long _recordId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Translation, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Translation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
		_columnOriginalValues.put("modifiedByName", _modifiedByName);
		_columnOriginalValues.put("deleted", _deleted);
		_columnOriginalValues.put("languageCode", _languageCode);
		_columnOriginalValues.put("modelName", _modelName);
		_columnOriginalValues.put("columnName", _columnName);
		_columnOriginalValues.put("text_", _text);
		_columnOriginalValues.put("recordId", _recordId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("id_", "id");
		attributeNames.put("text_", "text");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("id_", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("modifiedBy", 256L);

		columnBitmasks.put("modifiedByName", 512L);

		columnBitmasks.put("deleted", 1024L);

		columnBitmasks.put("languageCode", 2048L);

		columnBitmasks.put("modelName", 4096L);

		columnBitmasks.put("columnName", 8192L);

		columnBitmasks.put("text_", 16384L);

		columnBitmasks.put("recordId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Translation _escapedModel;

}